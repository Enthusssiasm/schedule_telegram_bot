from telegram import Update
from telegram.ext import ContextTypes
from utils import generate_password
from schedule_operations import get_schedule, get_tomorrow_schedule, send_schedule, send_tomorrow_schedule
from logging_config import setup_logger
from db_operations import add_user, delete_user
from config import YEKATERINBURG_TZ
from datetime import time


logger = setup_logger()


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = update.message.text
    user_id = update.effective_user.id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")

    if text == "üîí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å":
        password = generate_password()
        await update.message.reply_text(f"–í–∞—à —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")
    elif text == "üôÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        schedule = get_schedule()
        await update.message.reply_text(schedule, parse_mode='HTML')
    elif text == "üòØ –ö —á–µ–º—É –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞?":
        tomorrow_schedule = get_tomorrow_schedule()
        await update.message.reply_text(tomorrow_schedule, parse_mode='HTML')
    elif text == "üß© –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ":
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–∞—Ä–æ–ª—è–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")
    elif text == "üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É":
        is_new_user = add_user(user_id)

        if is_new_user:
            context.job_queue.run_daily(
                send_schedule, 
                time=time(8, 0, tzinfo=YEKATERINBURG_TZ), 
                chat_id=int(user_id), 
                name=f"schedule_{user_id}"
            )
            context.job_queue.run_daily(
                send_tomorrow_schedule, 
                time=time(22, 0, tzinfo=YEKATERINBURG_TZ), 
                chat_id=int(user_id), 
                name=f"tomorrow_schedule_{user_id}"
            )
            await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –∏ 22:00).")
        else:
            await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
    elif text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏":
        is_deleted_user = delete_user(user_id)
        if is_deleted_user:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ job_queue
            for name in [f"schedule_{user_id}", f"tomorrow_schedule_{user_id}"]:
                current_jobs = context.job_queue.get_jobs_by_name(name)
                for job in current_jobs:
                    job.schedule_removal()
            await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        else:
            await update.message.reply_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
    else:
        await update.message.reply_text(f"{text}")