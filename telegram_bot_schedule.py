from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import CommandHandler, Application, MessageHandler, filters, ContextTypes
from datetime import time
from config import BOT_TOKEN, YEKATERINBURG_TZ
from logging_config import setup_logger
from db_operations import get_all_users
from schedule_operations import send_schedule, send_tomorrow_schedule
from bot_keyboard import handle_message

logger = setup_logger()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    keyboard = [
        ["üîí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", "üôÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"],
        ["üòØ –ö —á–µ–º—É –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞?", "üß© –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"],
        ["üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π :)',
        reply_markup=reply_markup
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏
        all_users = get_all_users()
        for user_id in all_users:
            application.job_queue.run_daily(
                send_schedule, 
                time=time(8, 0, tzinfo=YEKATERINBURG_TZ),
                chat_id=int(user_id),
                name=f"schedule_{user_id}"
            )
            application.job_queue.run_daily(
                send_tomorrow_schedule, 
                time=time(22, 0, tzinfo=YEKATERINBURG_TZ), 
                chat_id=int(user_id), 
                name=f"tomorrow_schedule_{user_id}"
            )
            logger.info(f"–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        application.add_handler(CommandHandler('start', start_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {e}")
        raise

if __name__ == "__main__":
    main()